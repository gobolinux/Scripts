#!/bin/bash

### Imports ###################################################################

source ScriptFunctions
Import GoboLinux
Import OptionParser
Import Versions

### Options ###################################################################

scriptDescription="Find which applications is dependant on a given application."
scriptCredits="Copyright (C) 2007 Jonas Karlsson - Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<program> [<version>]"
scriptExample="Cairo 1.0.2"
scriptNotes="If no version is given, current version, or latest version, if no current version is found, is used."
Add_Option_Boolean "f" "fast" "Do a fast check - do not cross check result with ldd."
Add_Option_Boolean "s" "specific-version" "Be more specific regarding given version. May miss some applications."
Add_Option_Boolean "m" "include-minors" "Use the version given as base, and include any minor and bug release versions when checking."
Parse_Options "$@"

### Operation #################################################################

appname=$(GuessProgramCase "$(Arg 1)")
appver=$(Arg 2)
[ -z "${appver}" ] && {
   Set_Boolean "fast"
   appver=$(Get_Version ${appname} Current)
}
[ -z "${appver}" ] && appver=$(basename $(GuessLatest $(All_Versions ${appname})))
[ -z "${appver}" ] && Die "No version specified and no version could be guessed."
ls ${goboPrograms}/${appname} | grep -q "^${appver}" || Die "No such version (${appver}) is installed"
grepforversion=".*"
Boolean "specific-version" && grepforversion=${appver}
# We grep for the name, any version, in all Dependencies and BuildInformation files and extract name and version as '<name>/<version>' of the applications providing hits
dependants=$(grep -i "^${appname} *${grepforversion}" $goboPrograms/*/*/Resources/{Dependencies,BuildInformation} | Strip_Gobo_Programs | sed -e 's,\([^/]*/[^/]*\)/.*,\1,' -e '/[^\/]*\/Current/d' | sort | uniq)

# Go through all found dependencies
for dep in ${dependants}
do
   # Extract the name and version from the '<name>/<version>' string
   depname=${dep%/*}
   depver=${dep#*/}

   Boolean "include-minors" && appver_pat="${appver}" || appver_pat="${appver}$"
   ! Boolean "fast" && {
      # Run a cross check with GenBuildInformation and see if it really returns references to the actual application
      GenBuildInformation "${depname}" "${depver}" 2>/dev/null | grep "^${appname} " | grep -q " ${appver_pat}"
      result=(${PIPESTATUS[@]})
      # if nothing was returned, this application was a false positive from either the Dependencies or the BuildInformation file.
      if [ ${result[1]} = 0 -a ${result[2]} = 1 ]
      then
         dep=""
      else
         if [ ${result[1]} = 1 ]
	 then depinfo="Executable"
	 else depinfo="Dynamic library"
	 fi
      fi
   }

   # If verbose we print where dependency found
   Boolean "verbose" && where="   (${depinfo})"
   # If not zeroed, echo the dependency
   [ -n "$dep" ] && echo ${depname} ${depver}${where}
done
