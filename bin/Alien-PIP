#!/bin/sh

# Shell script implementing the Aliens interface for PIP 2.x and 3.x.
# Packages are installed onto /System/Aliens/PIP/$major.$minor. The Python module search
# path must include that directory, either through PYTHONPATH or through a .pth file.
#
# Copyright 2015-2018 Lucas C. Villa Real based on LuaRocks interface by Michael Homer.
# Released under the GNU GPL 2 or later.

. ScriptFunctions
Import Alien

getversion() {
   local prog=$(echo "$1" | sed 's,\(.*\),\L\1,g')
   local proginfo=$($pip list | sed 's,\(.*\),\L\1,g' | grep "^${prog} ")
   if [ -z "$proginfo" ]
   then exit 1
   else echo "$proginfo" | cut -d\( -f2 | cut -d\) -f1
   fi
}

getinstallversion() {
   prog="$1"
   versions=($(python${python_major} - << EOF
import json
try:
   from urllib2 import urlopen, Request
except ImportError:
   from urllib.request import urlopen, Request
from pkg_resources import parse_version 
def available_versions(prog):
   try:
     url = "https://pypi.python.org/pypi/%s/json" %prog
     data = json.load(urlopen(Request(url)))
     versions = list(data["releases"].keys())
     # sort available versions newest to oldest
     versions.sort(key=parse_version, reverse=True)
     return versions
   except:
     return ''
print("\n".join(available_versions("$prog")))
EOF
   ))
   for V in ${versions[@]}
   do
      if In_Version_Range "$2" "$V" "$3"
      then
         echo $V
         return 0
      fi
   done
}

install() {
   local prog="$1"
   local ver="$2"
   local target="$goboSystem/Aliens/PIP/${python_version}"
   local srcdir="$goboData/Compile/Sources"
   local pipprogarg="$prog"
   [ ! -z "$ver" ] && pipprogarg+="==$ver"
   
   if [ ! -d "$target" ]
   then
      mkdir -p "$target" || { echo "Failed to create $target."; exit 1; }
   fi
   $pip install --upgrade --prefix=$target --src=$srcdir "$pipprogarg"
   
   Symlink_Aliens "$goboExecutables" "$goboSystem"/Aliens/PIP/${python_version}/bin
}

remove() {
   local prog="$1"

   $pip uninstall "$prog"
   
   Cleanup_Aliens
}

executable="$(basename $0)"
if [ "$executable" = "Alien-PIP" -o "$executable" = "Alien-PIP2" ]
then
   python_major=2
elif [ "$(basename $0)" = "Alien-PIP3" ]
then
   python_major=3
else
   echo "Invalid executable name used: $executable"
   exit 1
fi

pip="pip${python_major} --disable-pip-version-check"

python_version=$(python${python_major} --version 2>&1 | awk {'print $2'} | cut -d. -f1-2)

command="$1"
prog="$2"

case "$command" in
   --getversion)
      echo $(getversion "$2")
      ;;
   --getinstallversion)
      echo $(getinstallversion "$2" "$3" "$4")
      ;;
   --greater-than)
      ver=$(getversion "$2")
      latest=$(GuessLatest "$ver" "$3")
      [ "$latest" = "$3" ] && exit 1 || exit 0
      ;;
   --met|--within-range|--interval)
      prog="$2"
      lower="$3"
      upper="$4"
      ver=$(getversion "$2")
	  In_Version_Range "$lower" "$ver" "$upper"
      ;;
   --have-manager)
      which pip${python_major}>/dev/null 2>&1 || exit 1
      ;;
   --get-manager-rule)
      if [ "$python_major" = 2 ]
      then echo "PIP >= 7.0.0"
      else echo "Python >= ${python_version}"
      fi
      ;;
   --install)
      install "$2" "$3"
      ;;
   --remove)
      remove "$2"
      ;;
esac # is ridiculous
